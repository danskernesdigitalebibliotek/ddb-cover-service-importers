# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    app.enable.no.hits: '%env(bool:APP_ENABLE_NO_HITS)%'
    openPlatform.auth.id: '%env(OPENPLATFORM_AUTH_ID)%'
    openPlatform.auth.secret: '%env(OPENPLATFORM_AUTH_SECRET)%'
    openPlatform.auth.url: '%env(OPENPLATFORM_AUTH_URL)%'
    openPlatform.auth.agency: '%env(OPENPLATFORM_AUTH_AGENCY)%'
    openPlatform.search.url: '%env(OPENPLATFORM_SEARCH_URL)%'
    openPlatform.search.ttl: '%env(OPENPLATFORM_SEARCH_TTL)%'
    openPlatform.search.profile: '%env(OPENPLATFORM_SEARCH_PROFILE)%'
    datawell.vendor.agency: '%env(DATAWELL_VENDOR_AGENCY)%'
    datawell.vendor.profile: '%env(DATAWELL_VENDOR_PROFILE)%'
    datawell.vendor.search_url: '%env(DATAWELL_VENDOR_SEARCH_URL)%'
    datawell.vendor.user: '%env(DATAWELL_VENDOR_USER)%'
    datawell.vendor.password: '%env(DATAWELL_VENDOR_PASSWORD)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $projectDir: '%kernel.project_dir%'
            $resourcesDir: '%kernel.project_dir%/resources'
            $statsLogger: '@monolog.logger.statistics'
            $cloudinaryUrl: '%env(CLOUDINARY_URL)%'
            $cloudinaryTransformations: '%env(yml:file:resolve:CLOUDINARY_CONFIG_FILE)%'
            $httpClient: '@eight_points_guzzle.client.guzzle_client'

            $bindElasticSearchUrl: '%env(ELASTIC_URL)%'
            $bindElasticStatsIndexPrefix: '%env(ELASTIC_STATS_INDEX_PREFIX)%'

    _instanceof:
        App\Service\VendorService\AbstractBaseVendorService:
            tags: [app.vendor.service]

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\VendorService\VendorServiceFactory:
        arguments: [!tagged app.vendor.service]

    App\Service\VendorService\BogPortalen\BogPortalenVendorService:
        arguments:
            $local: '@oneup_flysystem.local_filesystem'
            $ftp: '@oneup_flysystem.bogportalen_ftp_filesystem'

    App\Service\VendorService\RbDigital\RbDigitalBooksVendorService:
        arguments:
            $local: '@oneup_flysystem.local_filesystem'
            $ftp: '@oneup_flysystem.rbdigital_ftp_filesystem'

    App\Service\VendorService\TheMovieDatabase\TheMovieDatabaseApiService:
        arguments:
            $apiKey: '%env(THEMOVIEDATABASE_APIKEY)%'
