<?php
/**
 * @file
 * Upload service to handle user upload images.
 */

namespace App\Service\VendorService\UploadService;

use App\Entity\Image;
use App\Entity\Source;
use App\Service\CoverStore\CoverStoreInterface;
use App\Service\VendorService\AbstractBaseVendorService;
use App\Service\VendorService\ProgressBarTrait;
use App\Utils\Message\ProcessMessage;
use App\Utils\Message\VendorImportResultMessage;
use App\Utils\Types\IdentifierType;
use App\Utils\Types\VendorState;
use Doctrine\ORM\EntityManagerInterface;
use Enqueue\Client\ProducerInterface;
use Enqueue\Util\JSON;
use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

/**
 * Class UploadServiceVendorService.
 */
class UploadServiceVendorService extends AbstractBaseVendorService
{
    use ProgressBarTrait;

    protected const VENDOR_ID = 12;

    /** @var CoverStoreInterface $store */
    private $store;

    /** @var ProducerInterface $producer */
    private $producer;

    /**
     * CoverStoreSearchCommand constructor.
     *
     * @param EventDispatcherInterface $eventDispatcher
     * @param EntityManagerInterface $entityManager
     * @param LoggerInterface $statsLogger
     * @param CoverStoreInterface $store
     * @param ProducerInterface $producer
     */
    public function __construct(EventDispatcherInterface $eventDispatcher, EntityManagerInterface $entityManager, LoggerInterface $statsLogger, CoverStoreInterface $store, ProducerInterface $producer)
    {
        $this->store = $store;
        $this->producer = $producer;

        parent::__construct($eventDispatcher, $entityManager, $statsLogger);
    }

    /**
     * {@inheritdoc}
     */
    public function load(): VendorImportResultMessage
    {
        $this->progressStart('Searching CoverStore BulkUpload folder for new images');

        // Search
        $items = $this->store->search('BulkUpload');

        // @TODO: This is an assumption?
        $type = IdentifierType::PID;

        $inserted = 0;
        foreach ($items as $item) {
            list($folder, $filename) = explode('/', $item->getId());

            try {
                $item = $this->store->move($item->getId(), 'UploadService/'.$filename);
            } catch (\Exception $e) {
                // @TODO: error logging. This could happen if the image have been removed - it might already be in the
                // queue system.
            }

            // Get identifier from the image id. Assumption that it's url-encoded.
            $identifier = urldecode($filename);

            // Create image entity.
            $image = new Image();
            $image->setImageFormat($item->getImageFormat())
                ->setSize($item->getSize())
                ->setWidth($item->getWidth())
                ->setHeight($item->getHeight())
                ->setCoverStoreURL($item->getUrl())
                ->setAutoGenerated(false);
            $this->em->persist($image);

            // Create source entity.
            $source = new Source();
            $source->setMatchType($type)
                ->setMatchId($identifier)
                ->setVendor($this->getVendor())
                ->setDate(new \DateTime())
                ->setOriginalFile($item->getUrl())
                ->setOriginalContentLength($item->getSize())
                ->setOriginalLastModified(new \DateTime())
                ->setImage($image);
            $this->em->persist($source);

            // Make it stick.
            $this->em->flush();

            // Create queue message.
            $processMessage = new ProcessMessage();
            $processMessage->setOperation(VendorState::INSERT)
                ->setIdentifierType($type)
                ->setIdentifier($identifier)
                ->setVendorId($this->getVendorId())
                ->setImageId($image->getId());

            // Send message into queue system into the search part.
            $this->producer->sendEvent('SearchTopic', JSON::encode($processMessage));

            // Update UI with progress information.
            ++$inserted;
            $this->progressMessageFormatted(0, $inserted, $inserted);
            $this->progressAdvance();
        }

        $this->progressFinish();

        $count = count($items);
        return VendorImportResultMessage::success($count, 0, $count, 0);
    }
}
