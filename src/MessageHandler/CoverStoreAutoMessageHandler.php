<?php

/**
 * @file
 */

namespace App\MessageHandler;

use App\Entity\Image;
use App\Entity\Search;
use App\Exception\CoverStoreException;
use App\Exception\MaterialTypeException;
use App\Exception\PlatformAuthException;
use App\Exception\PlatformSearchException;
use App\Message\CoverStoreAutoMessage;
use App\Message\SearchMessage;
use App\Service\CoverStore\CoverStoreInterface;
use App\Service\OpenPlatform\SearchService;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Cache\InvalidArgumentException;
use Psr\Log\LoggerInterface;
use Symfony\Component\Messenger\Exception\UnrecoverableMessageHandlingException;
use Symfony\Component\Messenger\Handler\MessageHandlerInterface;
use Symfony\Component\Messenger\MessageBusInterface;

/**
 * Class CoverStoreAutoMessageHandler.
 */
class CoverStoreAutoMessageHandler implements MessageHandlerInterface
{
    private $em;
    private $coverStore;
    private $searchService;
    private $bus;
    private $statsLogger;

    const VENDOR = 'Unknown';

    /**
     * CoverStoreAutoProcessor constructor.
     *
     * @param EntityManagerInterface $entityManager
     * @param CoverStoreInterface $coverStore
     * @param SearchService $searchService
     * @param MessageBusInterface $bus
     * @param LoggerInterface $statsLogger
     */
    public function __construct(EntityManagerInterface $entityManager, CoverStoreInterface $coverStore, SearchService $searchService, MessageBusInterface $bus, LoggerInterface $statsLogger)
    {
        $this->em = $entityManager;
        $this->coverStore = $coverStore;
        $this->searchService = $searchService;
        $this->bus = $bus;
        $this->statsLogger = $statsLogger;
    }

    /**
     * @param CoverStoreAutoMessage $message
     *
     * @throws PlatformAuthException
     * @throws InvalidArgumentException
     */
    public function __invoke(CoverStoreAutoMessage $message)
    {
        // As there are more that one queue processor another process may have
        // upload a real cover before this job was executed to check that.
        $searchRepos = $this->em->getRepository(Search::class);
        $search = $searchRepos->findOneByisType($message->getIdentifier());
        if (!empty($search)) {
            // We assume image exits if a search result exists.
            throw new UnrecoverableMessageHandlingException('Cover already exists');
        }

        // Get information from the data well.
        try {
            $material = $this->searchService->search($message->getIdentifier(), $message->getIdentifierType());
        } catch (PlatformSearchException $e) {
            $this->statsLogger->error('Search request exception', [
                'service' => 'CoverStoreAutoProcessor',
                'message' => $e->getMessage(),
            ]);

            throw new UnrecoverableMessageHandlingException('Search request exception');
        } catch (MaterialTypeException $e) {
            $this->statsLogger->error('Unknown material type found', [
                'service' => 'CoverStoreAutoProcessor',
                'message' => $e->getMessage(),
                'identifier' => $message->getIdentifier(),
                'imageId' => $message->getImageId(),
            ]);

            throw new UnrecoverableMessageHandlingException('Unknown material type found');
        }

        if ($material->isEmpty()) {
            $this->statsLogger->error('Material not found in search', [
                'service' => 'CoverStoreAutoProcessor',
                'identifier' => $message->getIdentifier(),
            ]);

            throw new UnrecoverableMessageHandlingException('Material not found in search');
        }

        // Try to generate image based on the data well data.
        try {
            $item = $this->coverStore->generate($material, $this::VENDOR, $message->getIdentifier());
        } catch (CoverStoreException $exception) {
            $this->statsLogger->error('Cover store error - generate cover', [
                'service' => 'CoverStoreAutoProcessor',
                'identifier' => $message->getIdentifier(),
                'message' => $exception->getMessage(),
            ]);

            throw new UnrecoverableMessageHandlingException('Cover store error - generate cover');
        }

        // Create new image entity.
        $image = new Image();
        $image->setImageFormat($item->getImageFormat())
            ->setSize($item->getSize())
            ->setWidth($item->getWidth())
            ->setHeight($item->getHeight())
            ->setCoverStoreURL($item->getUrl())
            ->setAutoGenerated(true);

        $this->em->persist($image);
        $this->em->flush();

        // Send message to next part of the process.
        $message->setImageId($image->getId());
        $message->setVendorId($this::VENDOR);

        // Send message to next part of the process.
        $searchMessage = new SearchMessage();
        $searchMessage->setIdentifier($message->getIdentifier())
            ->setIdentifierType($message->getIdentifierType())
            ->setOperation($message->getOperation())
            ->setImageId($message->getImageId())
            ->setVendorId($message->getVendorId())
            ->setUseSearchCache($message->useSearchCache());
        $this->bus->dispatch($searchMessage);
    }
}
