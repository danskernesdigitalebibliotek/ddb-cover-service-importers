<?php

/**
 * @file
 */

namespace App\Queue;

use App\Entity\Image;
use App\Entity\Search;
use App\Exception\CoverStoreException;
use App\Exception\MaterialTypeException;
use App\Exception\PlatformSearchException;
use App\Service\CoverStore\CoverStoreInterface;
use App\Service\OpenPlatform\SearchService;
use App\Utils\Message\ProcessMessage;
use Doctrine\ORM\EntityManagerInterface;
use Enqueue\Client\ProducerInterface;
use Enqueue\Client\TopicSubscriberInterface;
use Interop\Queue\Context;
use Interop\Queue\Message;
use Interop\Queue\Processor;
use Karriere\JsonDecoder\JsonDecoder;
use Psr\Log\LoggerInterface;

/**
 * Class CoverStoreAutoProcessor.
 */
class CoverStoreAutoProcessor implements Processor, TopicSubscriberInterface
{
    private $em;
    private $coverStore;
    private $searchService;
    private $producer;
    private $statsLogger;

    const VENDOR = 'Unknown';

    /**
     * CoverStoreAutoProcessor constructor.
     *
     * @param EntityManagerInterface $entityManager
     * @param CoverStoreInterface $coverStore
     * @param SearchService $searchService
     * @param ProducerInterface $producer
     * @param LoggerInterface $statsLogger
     */
    public function __construct(EntityManagerInterface $entityManager, CoverStoreInterface $coverStore, SearchService $searchService, ProducerInterface $producer, LoggerInterface $statsLogger)
    {
        $this->em = $entityManager;
        $this->coverStore = $coverStore;
        $this->searchService = $searchService;
        $this->producer = $producer;
        $this->statsLogger = $statsLogger;
    }

    /**
     * {@inheritdoc}
     */
    public function process(Message $message, Context $session)
    {
        $jsonDecoder = new JsonDecoder(true);
        $processMessage = $jsonDecoder->decode($message->getBody(), ProcessMessage::class);

        // As there are more that one queue processor another process may have
        // upload a real cover before this job was executed to check that.
        $searchRepos = $this->em->getRepository(Search::class);
        $search = $searchRepos->findOneByisType($processMessage->getIdentifier());
        if (!empty($search)) {
            // We assume image exits if a search result exists.
            return self::REJECT;
        }

        // Get information from the data well.
        try {
            $material = $this->searchService->search($processMessage->getIdentifier(), $processMessage->getIdentifierType());
        } catch (PlatformSearchException $e) {
            $this->statsLogger->error('Search request exception', [
                'service' => 'CoverStoreAutoProcessor',
                'message' => $e->getMessage(),
            ]);

            return self::REQUEUE;
        } catch (MaterialTypeException $e) {
            $this->statsLogger->error('Unknown material type found', [
                'service' => 'CoverStoreAutoProcessor',
                'message' => $e->getMessage(),
                'identifier' => $processMessage->getIdentifier(),
                'imageId' => $processMessage->getImageId(),
            ]);

            return self::REJECT;
        }

        if ($material->isEmpty()) {
            $this->statsLogger->error('Material not found in search', [
                'service' => 'CoverStoreAutoProcessor',
                'identifier' => $processMessage->getIdentifier(),
            ]);

            return self::REJECT;
        }

        // Try to generate image based on the data well data.
        try {
            $item = $this->coverStore->generate($material, $this::VENDOR, $processMessage->getIdentifier());
        } catch (CoverStoreException $exception) {
            $this->statsLogger->error('Cover store error - generate cover', [
                'service' => 'CoverStoreAutoProcessor',
                'identifier' => $processMessage->getIdentifier(),
                'message' => $exception->getMessage(),
            ]);

            return self::REJECT;
        }

        // Create new image entity.
        $image = new Image();
        $image->setImageFormat($item->getImageFormat())
            ->setSize($item->getSize())
            ->setWidth($item->getWidth())
            ->setHeight($item->getHeight())
            ->setCoverStoreURL($item->getUrl())
            ->setAutoGenerated(true);

        $this->em->persist($image);
        $this->em->flush();

        // Send message to next part of the process.
        $processMessage->setImageId($image->getId());
        $processMessage->setVendorId($this::VENDOR);
        $this->producer->sendEvent('SearchProcess', \json_encode($processMessage));

        return self::ACK;
    }

    // phpcs:disable Symfony.Functions.ScopeOrder.Invalid
    /**
     * {@inheritdoc}
     */
    public static function getSubscribedTopics()
    {
        return ['CoverStoreAutoTopic' => [
              'processorName' => 'CoverStoreAutoProcessor',
              'queueName' => 'CoverStoreAutoQueue',
            ],
        ];
    }
    // phpcs:enable
}
