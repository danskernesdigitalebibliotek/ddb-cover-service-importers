---
on: [create]
name: Release

env:
  ORG_NAME: danskernesdigitalebibliotek
  APP_VERSION: ${{ github.event.ref }}
  NAMESPACE: cover-service

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.ref_type == 'tag' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master
      - name: Login to github package registry
        run: docker login docker.pkg.github.com -u publisher -p "${{ secrets.GITHUB_TOKEN }}"

      - name: Build CoverService image
        run: docker build --build-arg APP_VERSION=${{ env.APP_VERSION }} --tag="docker.pkg.github.com/${{ env.ORG_NAME }}/ddb-cover-service-importers/cover-service-importers:${{ env.APP_VERSION }}" --file="infrastructure/docker/cover-service-importers/Dockerfile" infrastructure/docker/cover-service-importers

      - name: Build nginx side-car image
        run: docker build --build-arg APP_VERSION=${{ env.APP_VERSION }} --tag="docker.pkg.github.com/${{ env.ORG_NAME }}/ddb-cover-service/cover-service-jobs:${{ env.APP_VERSION }}" --file="infrastructure/docker/cover-service-jobs/Dockerfile" infrastructure/docker/cover-service-jobs

      - name: Push CoverService image
        run: docker push docker.pkg.github.com/${{ env.ORG_NAME }}(ddb-cover-service-importers/cover-service-importers:${{ env.APP_VERSION }}

      - name: Push CoverService Nginx image
        run: docker push docker.pkg.github.com/${{ env.ORG_NAME }}/ddb-cover-service/cover-service-jobs:${{ env.APP_VERSION }}

  deploy:
    runs-on: ubuntu-latest
    if: github.event.ref_type == 'tag' && github.ref == 'refs/heads/master'
    needs:
      build
    steps:
      - uses: actions/checkout@master
      
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - name: Set AKS Context (Prod)
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ddb-cover-service
          resource-group: CoverService

      - name: Render Deployment YAML
        uses: nowactions/envsubst@v1
        with:
          input: ./infrastructure/k8s/jobs-deployment.yaml
          output: ./rendered-deployment.yaml
        env:
          APP_VERSION: ${{ env.APP_VERSION }}

      - name: Deployment
        run: kubectl -n ${{ env.NAMESPACE }} apply -f ./rendered-deployment.yaml
